# -*- coding: utf-8 -*-
"""ML PART INFORMAL PROJECT.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dm59YVdXUu_WBasCiBAZ5nFFngy3tz0Y
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

insect_data = pd.read_csv('/content/features_informal_project - features_informal_project.csv.csv', header=None)

insect_data.head()

insect_data[4].value_counts()

# separating data and Labels
X = insect_data.drop(columns=4, axis=1)
Y = insect_data[4]

print(Y)

le = LabelEncoder()
Y = le.fit_transform(Y)

from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score
from sklearn.linear_model import LogisticRegression
from sklearn.linear_model import LinearRegression
from sklearn.naive_bayes import GaussianNB
from sklearn.neural_network import MLPClassifier, MLPRegressor
import xgboost as xgb



# Load and preprocess your data (X and y)

# Split the data into training and testing sets
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=42)

# Create and train the models
models = [
    DecisionTreeClassifier(),
    RandomForestClassifier(),
    SVC(),
    KNeighborsClassifier(),
    LogisticRegression(),

]

for model in models:
    # Train the model
    model.fit(X_train, Y_train)

    # Make predictions on the testing data
    Y_pred = model.predict(X_test)

    # Calculate the accuracy
    accuracy = accuracy_score(Y_test, Y_pred)

    # Print the accuracy
    print(f"Model: {model.__class__.__name__} - Accuracy: {accuracy}")

import numpy as np

input_data = (0.5309,0.89147,0.29807,0.94205)

# changing the input_data to a numpy array
input_data_as_numpy_array = np.asarray(input_data)

# reshape the np array as we are predicting for one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = model.predict(input_data_reshaped)
print(prediction)

if (prediction[0]=='Stored Grain Insects'):
  print('It is stored grain insects')
elif(prediction[0]=='Soil Invertebrates'):
  print('It is soil invertebrates')
elif(prediction[0]=='Other Species'):
  print('It is other species')
elif(prediction[0]=='Flies and Mosquitoes'):
  print('It is flies and mosquitoes')
elif(prediction[0]=='Insects in woods'):
  print('It is insects in woods')
else:
  print('it is Background sound')